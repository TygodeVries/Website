codeElements = [];
nextLesson = "unknown";

async function loadLesson() {
	const params = new URLSearchParams(window.location.search);
	const lesson = params.get("lesson").replace(">", "/");
	console.log("Loading: " + lesson);

	const response = await fetch("./course-info/" + lesson + ".json");

	if (!response.ok) {
		window.location.href = "../browse/?error=course_not_found";
		return;
	}

	const data = await response.json();

	document.title = data["title"];
	document.getElementById("title").innerText = data["title"];
	document.getElementById("description").innerText = data["description"];

	var content = "";
	const sections = data["sections"];

	nextLesson = data["next"];

	var codeBlockIndex = 0;
	sections.forEach((section) => {
		if (section["type"] === "text") {
			content +=
				`<pre><p class="content-text">${section["content"]}</p></pre>`;
		} else if (section["type"] === "mission") {
			content +=
				`<pre><p class="mission-header">Mission</p><p class="content-mission">${section["content"]}</p></pre>`;
		} else if (section["type"] === "warning") {
			content +=
				`<pre><p class="warning-header">Warning</p><p class="content-warning">${section["content"]}</p></pre>`;
		} else if (section["type"] === "code") {
			content +=
				'<button onclick="copyCode(' +
				codeBlockIndex +
				')" class="copy-button">Copy</button>';
			content +=
				'<pre><code class="' +
				section["lang"] +
				'">' +
				section["content"] +
				"</code></pre>";
			codeElements[codeBlockIndex] = section["content"];
			codeBlockIndex++;
		} else if (section["type"] === "image") {
			content += '<button class="image-box" onclick="zoom(this)">';
			content +=
				"<image src=" + section["content"] + ' class="zoom"></image>';
			content +=
				'<div class="content-text">' + section["context"] + "</div>";
			content += "</button>";
		} else {
			content +=
				'<pre><p class="content-text content-invalid">Invalid Type: ' +
				section["type"] +
				" (Corrupt Course?)</p></pre>";
		}
	});

	var contentHtml = document.getElementById("content");

	if (contentHtml == undefined) {
		console.error("Could not find content tag!");
	}

	contentHtml.innerHTML = content;

	Prism.highlightAll();
}

function copyCode(index) {
	const code = codeElements[index];
	navigator.clipboard.writeText(code);

	Swal.fire({
		icon: "success",
		title: "Copied!",
		text: "The text has been copied to your clipboard.",
		showConfirmButton: false,
		timer: 1500,
	});
}

function zoom(element) {
	console.log(element.innerHTML);
	Swal.fire({
		html: element.innerHTML,
		width: "90%",
		confirmButtonText: "Close",
	});
}

loadLesson();

function help() {
	Swal.fire({
		title: "How do you want help?",
		showDenyButton: true,
		showCancelButton: true,

		confirmButtonColor: "#6a9942",
		confirmButtonText: "Ask a Human 🙋‍♂️",

		denyButtonColor: "#4d84a1",
		denyButtonText: `Ask ChatGPT 🤖`,
	}).then((result) => {
		if (result.isConfirmed) {
			window.open("https://discord.gg/U92cNGZyrT"); // Discord URL Yay
		} else if (result.isDenied) {
			Swal.fire({
				title: "We will make a prompt...<br>Just scroll down and enter your question!"
			}).then(() => {
				OpenGPT();
			})
		}
	});
}


async function OpenGPT()
{
	Swal.fire({
		title: "Opening ChatGPT..."
	});
	const params = new URLSearchParams(window.location.search);
	const lesson = params.get("lesson").replace(">", "/");;

	const response = await fetch("./course-info/" + lesson + ".json");

	const prompt = '.( Hey User! Scroll down! You can ignore all of this :D )\n\nThe user is following a beginners programming course. Here is a simplified JSON version of the page I am looking at, generated by the page, just like the beginning of this message: ' + await response.text() +' It is not about JSON, the formatting of the JSON or how the json works with the course. The json just contains the data of what the user is looking at. If you are unsure on what to answer, or do not understand the course content or question of the user, do not make a guess, ask the user to contact a human instead. You do not have to thank the user for giving a json file, this is auto generated. You can be nice!\nMy question is: ';
	const encodedPrompt = encodeURIComponent(prompt);
	const url = `https://chat.openai.com/?&prompt=${encodedPrompt}`;

	window.open(url, "_blank", "noopener,noreferrer");
}

function next() {
	window.location.href = "?lesson=" + nextLesson;
}

function exit() {
	window.location.href = "../browse/";
}
